############ GENERAL PARAMETERS #################

### Option: PidFile
#    Name of PID file.
#
# Mandatory: no
# Default:
# PidFile=/tmp/zabbix_agentd.pid

PidFile=/var/run/zabbix/zabbix_agentd.pid

### Option: LogFile
#    Name of log file.
#    If not set, syslog is used.
#
# Mandatory: no
# Default:
# LogFile=

LogFile=/var/log/zabbix/zabbix_agentd.log

### Option: LogFileSize
#    Maximum size of log file in MB.
#    0 - disable automatic log rotation.
#
# Mandatory: no
# Range: 0-1024
# Default:
# LogFileSize=1

LogFileSize=1

### Option: DebugLevel
#    Specifies debug level
#    0 - no debug
#    1 - critical information
#    2 - error information
#    3 - warnings
#    4 - for debugging (produces lots of information)
#
# Mandatory: no
# Range: 0-4
# Default:
# DebugLevel=3

### Option: SourceIP
#    Source IP address for outgoing connections.
#
# Mandatory: no
# Default:
# SourceIP=

### Option: EnableRemoteCommands
#    Whether remote commands from Zabbix server are allowed.
#    0 - not allowed
#    1 - allowed
#
# Mandatory: no
# Default:
EnableRemoteCommands=1

### Option: LogRemoteCommands
#    Enable logging of executed shell commands as warnings.
#    0 - disabled
#    1 - enabled
#
# Mandatory: no
# Default:
# LogRemoteCommands=0

##### Passive checks related

### Option: Server
#    List of comma delimited IP addresses (or hostnames) of Zabbix servers.
#    Incoming connections will be accepted only from the hosts listed here.
#    If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally.
#
# Mandatory: no
# Default:
Server=kuf-serv

### Option: ListenPort
#    Agent will listen on this port for connections from the server.
#
# Mandatory: no
# Range: 1024-32767
# Default:
# ListenPort=10050

### Option: ListenIP
#    List of comma delimited IP addresses that the agent should listen on.
#    First IP address is sent to Zabbix server if connecting to it to retrieve list of active checks.
#
# Mandatory: no
# Default:
# ListenIP=0.0.0.0

### Option: StartAgents
#    Number of pre-forked instances of zabbix_agentd that process passive checks.
#    If set to 0, disables passive checks and the agent will not listen on any TCP port.
#
# Mandatory: no
# Range: 0-100
# Default:
#StartAgents=3

##### Active checks related

### Option: ServerActive
#    List of comma delimited IP:port (or hostname:port) pairs of Zabbix servers for active checks.
#    If port is not specified, default port is used.
#    IPv6 addresses must be enclosed in square brackets if port for that host is specified.
#    If port is not specified, square brackets for IPv6 addresses are optional.
#    If this parameter is not specified, active checks are disabled.
#    Example: ServerActive=127.0.0.1:20051,zabbix.domain,[::1]:30051,::1,[12fc::1]
#
# Mandatory: no
# Default:
# ServerActive=

ServerActive=kuf-serv:10051

### Option: Hostname
#    Unique, case sensitive hostname.
#    Required for active checks and must match hostname as configured on the server.
#    Value is acquired from HostnameItem if undefined.
#
# Mandatory: no
# Default:
# Hostname=

#Hostname=Zabbix server

### Option: HostnameItem
#    Item used for generating Hostname if it is undefined. Ignored if Hostname is defined.
#    Does not support UserParameters or aliases.
#
# Mandatory: no
# Default:
HostnameItem=system.hostname

### Option: HostMetadata
#    Optional parameter that defines host metadata.
#    Host metadata is used at host auto-registration process.
#    An agent will issue an error and not start if the value is over limit of 255 characters.
#    If not defined, value will be acquired from HostMetadataItem.
#
# Mandatory: no
# Range: 0-255 characters
# Default:
# HostMetadata=
HostMetadata=Linux

### Option: HostMetadataItem
#    Optional parameter that defines an item used for getting host metadata.
#    Host metadata is used at host auto-registration process.
#    During an auto-registration request an agent will log a warning message if
#    the value returned by specified item is over limit of 255 characters.
#    This option is only used when HostMetadata is not defined.
#
# Mandatory: no
# Default:
# HostMetadataItem=

### Option: RefreshActiveChecks
#    How often list of active checks is refreshed, in seconds.
#
# Mandatory: no
# Range: 60-3600
# Default:
RefreshActiveChecks=60

### Option: BufferSend
#    Do not keep data longer than N seconds in buffer.
#
# Mandatory: no
# Range: 1-3600
# Default:
# BufferSend=5

### Option: BufferSize
#    Maximum number of values in a memory buffer. The agent will send
#    all collected data to Zabbix Server or Proxy if the buffer is full.
#
# Mandatory: no
# Range: 2-65535
# Default:
# BufferSize=100

### Option: MaxLinesPerSecond
#    Maximum number of new lines the agent will send per second to Zabbix Server
#    or Proxy processing 'log' and 'logrt' active checks.
#    The provided value will be overridden by the parameter 'maxlines',
#    provided in 'log' or 'logrt' item keys.
#
# Mandatory: no
# Range: 1-1000
# Default:
# MaxLinesPerSecond=100

############ ADVANCED PARAMETERS #################

### Option: Alias
#    Sets an alias for an item key. It can be used to substitute long and complex item key with a smaller and simpler one.
#    Multiple Alias parameters may be present. Multiple parameters with the same Alias key are not allowed.
#    Different Alias keys may reference the same item key.
#    For example, to retrieve the ID of user 'zabbix':
#    Alias=zabbix.userid:vfs.file.regexp[/etc/passwd,^zabbix:.:([0-9]+),,,,\1]
#    Now shorthand key zabbix.userid may be used to retrieve data.
#    Aliases can be used in HostMetadataItem but not in HostnameItem parameters.
#
# Mandatory: no
# Range:
# Default:

### Option: Timeout
#    Spend no more than Timeout seconds on processing
#
# Mandatory: no
# Range: 1-30
# Default:
# Timeout=3

### Option: AllowRoot
#    Allow the agent to run as 'root'. If disabled and the agent is started by 'root', the agent
#    will try to switch to user 'zabbix' instead. Has no effect if started under a regular user.
#    0 - do not allow
#    1 - allow
#
# Mandatory: no
# Default:
# AllowRoot=0

### Option: Include
#    You may include individual files or all files in a directory in the configuration file.
#    Installing Zabbix will create include directory in /usr/local/etc, unless modified during the compile time.
#
# Mandatory: no
# Default:
# Include=

#Include=/etc/zabbix/zabbix_agentd.d/

####### USER-DEFINED MONITORED PARAMETERS #######

### Option: UnsafeUserParameters
#    Allow all characters to be passed in arguments to user-defined parameters.
#    0 - do not allow
#    1 - allow
#
# Mandatory: no
# Range: 0-1
# Default:
UnsafeUserParameters=1

### Option: UserParameter
#    User-defined parameter to monitor. There can be several user-defined parameters.
#    Format: UserParameter=<key>,<shell command>
#    See 'zabbix_agentd' directory for examples.
#
# Mandatory: no
# Default:
# UserParameter=
UserParameter=pgsql.bgwriter.checkpoints_timed[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select checkpoints_timed from pg_stat_bgwriter" -h 10.50.50.1 -U postgres postgres && unset PGPASSWORD
UserParameter=pgsql.bgwriter.checkpoints_req[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX $1 -c "select checkpoints_req from pg_stat_bgwriter" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.bgwriter.checkpoint_write_time[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select checkpoint_write_time from pg_stat_bgwriter" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.bgwriter.checkpoint_sync_time[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select checkpoint_sync_time from pg_stat_bgwriter" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.bgwriter.buffers_checkpoint[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select buffers_checkpoint from pg_stat_bgwriter" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.bgwriter.buffers_clean[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select buffers_clean from pg_stat_bgwriter" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.bgwriter.maxwritten_clean[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select maxwritten_clean from pg_stat_bgwriter" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.bgwriter.buffers_backend[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select buffers_backend from pg_stat_bgwriter" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.bgwriter.buffers_backend_fsync[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select buffers_backend_fsync from pg_stat_bgwriter" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.bgwriter.buffers_alloc[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select buffers_alloc from pg_stat_bgwriter" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.buffercache.clear[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_buffercache where not isdirty" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.buffercache.dirty[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_buffercache where isdirty" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.buffercache.used[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_buffercache where reldatabase is not null" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.buffercache.total[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_buffercache" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.ping[*],/bin/echo -e "\\\timing \n select 1" | PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD | tail -n 1 |cut -d' ' -f2
UserParameter=pgsql.uptime[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select date_part('epoch', now() - pg_postmaster_start_time())::int" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.cache.hit[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select round(sum(blks_hit)*100/sum(blks_hit+blks_read), 2) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.connections.active[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX  -c "select count(*) from pg_stat_activity where state = 'active'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.connections.idle[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_stat_activity where state = 'idle'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.connections.idle_in_transaction[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_stat_activity where state = 'idle in transaction'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.connections.total[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_stat_activity" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.connections.total_pct[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*)*100/(select current_setting('max_connections')::int) from pg_stat_activity" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.connections.waiting[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_stat_activity where waiting" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.connections.prepared[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_prepared_xacts" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.db.size[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select pg_database_size('$2')" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.size[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select pg_relation_size('$2')" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.index.size[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select pg_total_relation_size('$2') - pg_relation_size('$2')" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.dbstat.sum.numbackends[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(numbackends) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.xact_commit[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(xact_commit) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.xact_rollback[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(xact_rollback) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.blks_read[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(blks_read) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.blks_hit[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(blks_hit) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.tup_returned[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(tup_returned) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.tup_fetched[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(tup_fetched) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.tup_inserted[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(tup_inserted) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.tup_updated[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(tup_updated) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.tup_deleted[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(tup_deleted) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.conflicts[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(conflicts) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.temp_files[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(temp_files) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.temp_bytes[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(temp_bytes) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.sum.deadlocks[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select sum(deadlocks) from pg_stat_database" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.dbstat.numbackends[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select numbackends from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.xact_commit[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select xact_commit from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.xact_rollback[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select xact_rollback from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.blks_read[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select blks_read from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.blks_hit[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select blks_hit from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.tup_returned[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select tup_returned from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.tup_fetched[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select tup_fetched from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.tup_inserted[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select tup_inserted from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.tup_updated[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select tup_updated from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.tup_deleted[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select tup_deleted from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.conflicts[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select conflicts from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.temp_files[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select temp_files from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.temp_bytes[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select temp_bytes from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.dbstat.deadlocks[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select deadlocks from pg_stat_database where datname = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.table.stat.heap_blks_read[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(heap_blks_read,0) from pg_statio_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.heap_blks_hit[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(heap_blks_hit,0) from pg_statio_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.idx_blks_read[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(idx_blks_read,0) from pg_statio_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.idx_blks_hit[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(idx_blks_hit,0) from pg_statio_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.toast_blks_read[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(toast_blks_read,0) from pg_statio_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.toast_blks_hit[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(toast_blks_hit,0) from pg_statio_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.tidx_blks_read[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(tidx_blks_read,0) from pg_statio_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.tidx_blks_hit[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(tidx_blks_hit,0) from pg_statio_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.table.stat.seq_scan[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(seq_scan,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.seq_tup_read[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(seq_tup_read,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.idx_scan[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(idx_scan,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.idx_tup_fetch[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(idx_tup_fetch,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.n_tup_ins[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(n_tup_ins,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.n_tup_del[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(n_tup_del,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.n_tup_upd[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(n_tup_upd,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.n_tup_hot_upd[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(n_tup_hot_upd,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.n_live_tup[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(n_live_tup,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.n_dead_tup[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(n_dead_tup,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.vacuum_count[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(vacuum_count,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.autovacuum_count[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(autovacuum_count,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.analyze_count[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(analyze_count,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.table.stat.autoanalyze_count[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(autoanalyze_count,0) from pg_stat_user_tables where (schemaname || '.' || relname) = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.streaming.count[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_stat_replication" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.streaming.state[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select pg_is_in_recovery()" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.streaming.lag.bytes[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select greatest(0,pg_xlog_location_diff(pg_current_xlog_location(), replay_location)) from pg_stat_replication where client_addr = '$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.streaming.lag.seconds[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -h $2 -c "select extract(epoch from now() - pg_last_xact_replay_timestamp())" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.transactions.idle[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(extract(epoch from max(age(now(), query_start))), 0) from pg_stat_activity where state='idle in transaction'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.transactions.active[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(extract(epoch from max(age(now(), query_start))), 0) from pg_stat_activity where state <> 'idle in transaction' and state <> 'idle'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.transactions.waiting[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(extract(epoch from max(age(now(), query_start))), 0) from pg_stat_activity where waiting" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.transactions.prepared[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select coalesce(extract(epoch from max(age(now(), prepared))), 0) from pg_prepared_xacts" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.pgstatstatements.avg_query_time[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX $-c "select round((sum(total_time) / sum(calls))::numeric,2) from pg_stat_statements" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.table.tuples[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from $2" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.setting[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select current_setting('$2')" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.trigger[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_trigger where tgenabled='O' and tgname='$2'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.wal.write[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select pg_xlog_location_diff(pg_current_xlog_location(),'0/00000000')" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD
UserParameter=pgsql.wal.count[*],PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -c "select count(*) from pg_ls_dir('pg_xlog')" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD

UserParameter=pgsql.db.discovery[*],/bin/echo -n '{"data":['; for db in $(PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX  -c "select datname from pg_database where not datistemplate and datallowconn and datname!='postgres'" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD); do /bin/echo -n "{\"{#DBNAME}\": \"$db\"},"; done |sed -e 's:,$::'; /bin/echo -n ']}'
UserParameter=pgsql.table.discovery[*],/bin/echo -n '{"data":['; for table in $(PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX -F.  -c "select n.nspname,c.relname from pg_catalog.pg_class c left join pg_catalog.pg_namespace n on n.oid = c.relnamespace where c.relkind in ('r','s','') and n.nspname not in ('^pg_toast','information_schema','pg_catalog')" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD); do /bin/echo -n "{\"{#TABLENAME}\": \"$table\"},"; done |sed -e 's:\},$:\}:'; /bin/echo -n ']}'
UserParameter=pgsql.streaming.discovery[*],/bin/echo -n '{"data":['; for replica in $(PGPASSWORD=12345678 && export PGPASSWORD && psql -qAtX  -c "select client_addr from pg_stat_replication" -h 10.50.50.1 -U postgres postgres  && unset PGPASSWORD); do /bin/echo -n "{\"{#HOTSTANDBY}\": \"$replica\"},"; done |sed -e 's:,$::'; /bin/echo -n ']}'

####### LOADABLE MODULES #######

### Option: LoadModulePath
#    Full path to location of agent modules.
#    Default depends on compilation options.
#
# Mandatory: no
# Default:
# LoadModulePath=${libdir}/modules

### Option: LoadModule
#    Module to load at agent startup. Modules are used to extend functionality of the agent.
#    Format: LoadModule=<module.so>
#    The modules must be located in directory specified by LoadModulePath.
#    It is allowed to include multiple LoadModule parameters.
#
# Mandatory: no
# Default:
# LoadModule=